//MAcro para filtrar fechas
Sub CalcularDiasDesdeIngreso()
    Dim ws As Worksheet
    Dim ultimaFila As Long
    Dim colIngreso As Long
    Dim colDias As Long
    Dim i As Long
    Dim encabezadoIngreso As String
    Dim encabezadoDias As String
    
    ' Nombre de los encabezados que debe buscar
    encabezadoIngreso = "Fecha de ingreso"
    encabezadoDias = "Días transcurridos"
    
    Set ws = ThisWorkbook.Sheets("Hoja1") ' Cambia al nombre real de tu hoja
    
    ' Buscar la columna que contiene el encabezado de ingreso
    On Error Resume Next
    colIngreso = Application.Match(encabezadoIngreso, ws.Rows(1), 0)
    colDias = Application.Match(encabezadoDias, ws.Rows(1), 0)
    On Error GoTo 0
    
    ' Si no existe la columna de días, la creamos a la derecha
    If colDias = 0 Then
        colDias = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column + 1
        ws.Cells(1, colDias).Value = encabezadoDias
    End If
    
    ' Verificar que se encontró la columna de ingreso
    If colIngreso = 0 Then
        MsgBox "No se encontró la columna '" & encabezadoIngreso & "'", vbExclamation
        Exit Sub
    End If
    
    ' Última fila con datos
    ultimaFila = ws.Cells(ws.Rows.Count, colIngreso).End(xlUp).Row
    
    ' Calcular los días transcurridos
    For i = 2 To ultimaFila
        If IsDate(ws.Cells(i, colIngreso).Value) Then
            ws.Cells(i, colDias).Value = Date - ws.Cells(i, colIngreso).Value
        Else
            ws.Cells(i, colDias).Value = ""
        End If
    Next i
    
    MsgBox "Cálculo completado."
End Sub

//  Macro para sacar datos de otro archivo 

Sub BuscarIDporEncabezado()
    Dim wbOrigen As Workbook, wsOrigen As Worksheet
    Dim wbDestino As Workbook, wsDestino As Worksheet
    Dim colID As Long, colDato As Long
    Dim ultimaFila As Long, filaEncontrada As Variant
    Dim ID_Buscar As String
    
    Set wbDestino = ThisWorkbook
    Set wsDestino = wbDestino.Sheets("Hoja1")
    
    ' Abrir archivo origen
    Set wbOrigen = Workbooks.Open("C:\Users\angel\Documents\Datos.xlsx")
    Set wsOrigen = wbOrigen.Sheets("Hoja1")
    
    ' Buscar columnas por encabezados en la fila 1
    colID = Application.Match("ID", wsOrigen.Rows(1), 0)
    colDato = Application.Match("Nombre", wsOrigen.Rows(1), 0)
    
    ' ID que quieres buscar
    ID_Buscar = wsDestino.Range("A2").Value
    
    ' Buscar la fila del ID
    filaEncontrada = Application.Match(ID_Buscar, wsOrigen.Columns(colID), 0)
    
    If Not IsError(filaEncontrada) Then
        wsDestino.Range("B2").Value = wsOrigen.Cells(filaEncontrada, colDato).Value
    Else
        wsDestino.Range("B2").Value = "No encontrado"
    End If
    
    ' Cerrar el archivo origen
    wbOrigen.Close SaveChanges:=False
End Sub

\\ Cusqueda y copia 
Sub BuscarYPegarDatos()
    Dim wbPrincipal As Workbook, wsPrincipal As Worksheet
    Dim wbOrigen As Workbook, wsOrigen As Worksheet
    Dim ultimaFilaPrincipal As Long, ultimaFilaOrigen As Long
    Dim i As Long, filaEncontrada As Variant
    Dim pieza As String
    
    ' Archivo principal (este donde corre la macro)
    Set wbPrincipal = ThisWorkbook
    Set wsPrincipal = wbPrincipal.Sheets("Hoja1") ' cambia el nombre de hoja
    
    ' Abrir archivo origen
    Set wbOrigen = Workbooks.Open("C:\Users\angel\Documents\Datos.xlsx") ' cambia ruta
    Set wsOrigen = wbOrigen.Sheets("Hoja1") ' cambia el nombre de hoja
    
    ' Últimas filas
    ultimaFilaPrincipal = wsPrincipal.Cells(wsPrincipal.Rows.Count, "A").End(xlUp).Row
    ultimaFilaOrigen = wsOrigen.Cells(wsOrigen.Rows.Count, "A").End(xlUp).Row
    
    ' Recorrer todas las piezas del archivo principal (columna A)
    For i = 2 To ultimaFilaPrincipal
        pieza = wsPrincipal.Cells(i, "A").Value
        
        If pieza <> "" Then
            ' Buscar pieza en archivo origen (columna A)
            filaEncontrada = Application.Match(pieza, wsOrigen.Range("A1:A" & ultimaFilaOrigen), 0)
            
            If Not IsError(filaEncontrada) Then
                ' Copiar columnas B, C, D desde origen al principal
                wsPrincipal.Cells(i, "B").Value = wsOrigen.Cells(filaEncontrada, "B").Value
                wsPrincipal.Cells(i, "C").Value = wsOrigen.Cells(filaEncontrada, "C").Value
                wsPrincipal.Cells(i, "D").Value = wsOrigen.Cells(filaEncontrada, "D").Value
            Else
                wsPrincipal.Cells(i, "B").Value = "No encontrado"
            End If
        End If
    Next i
    
    ' Cerrar archivo origen sin guardar
    wbOrigen.Close SaveChanges:=False
    
    MsgBox "Proceso terminado"
End Sub

///      macro que me interesa 

Sub ExtraerBatchFlexible()
    Dim wbPrincipal As Workbook, wsPrincipal As Worksheet
    Dim wbOrigen As Workbook, wsOrigen As Worksheet
    Dim ultimaFilaPrincipal As Long, ultimaFilaOrigen As Long
    Dim i As Long, filaEncontrada As Variant
    Dim pieza As String, batch As String
    Dim operador As String, archivoOrigen As String
    Dim colNP As Long, colBatch As Long
    
    ' 1. Pedir nombre de operador
    operador = InputBox("Ingrese el nombre del operador:", "Operador")
    If operador = "" Then
        MsgBox "Debe ingresar un nombre de operador.", vbExclamation
        Exit Sub
    End If
    
    ' 2. Seleccionar archivo origen
    archivoOrigen = Application.GetOpenFilename("Archivos de Excel (*.xlsx), *.xlsx", , "Seleccione el archivo origen")
    If archivoOrigen = "Falso" Then Exit Sub
    
    ' 3. Definir libro principal
    Set wbPrincipal = ThisWorkbook
    Set wsPrincipal = wbPrincipal.Sheets("Hoja1") ' cambia el nombre de la hoja
    
    ' 4. Abrir archivo origen
    Set wbOrigen = Workbooks.Open(archivoOrigen)
    Set wsOrigen = wbOrigen.Sheets(1) ' cambia si necesitas una hoja específica
    
    ' 5. Buscar las columnas NP y Batch en la fila 1
    On Error Resume Next
    colNP = Application.Match("NP", wsOrigen.Rows(1), 0)
    colBatch = Application.Match("Batch", wsOrigen.Rows(1), 0)
    On Error GoTo 0
    
    If colNP = 0 Or colBatch = 0 Then
        MsgBox "No se encontró la columna 'NP' o 'Batch' en el archivo origen.", vbCritical
        wbOrigen.Close SaveChanges:=False
        Exit Sub
    End If
    
    ' 6. Detectar últimas filas
    ultimaFilaPrincipal = wsPrincipal.Cells(wsPrincipal.Rows.Count, "A").End(xlUp).Row
    ultimaFilaOrigen = wsOrigen.Cells(wsOrigen.Rows.Count, colNP).End(xlUp).Row
    
    ' 7. Recorremos archivo principal
    For i = 2 To ultimaFilaPrincipal
        pieza = wsPrincipal.Cells(i, "A").Value ' "Número Parte" en principal
        
        If pieza <> "" Then
            ' Buscar pieza en origen (en columna NP detectada)
            filaEncontrada = Application.Match(pieza, wsOrigen.Range(wsOrigen.Cells(2, colNP), wsOrigen.Cells(ultimaFilaOrigen, colNP)), 0)
            
            If Not IsError(filaEncontrada) Then
                ' Ajustar índice porque Match empieza desde la fila 2
                filaEncontrada = filaEncontrada + 1
                
                ' Extraer Batch desde la columna encontrada
                batch = wsOrigen.Cells(filaEncontrada, colBatch).Value
                
                ' Procesar para quitar el primer "0" y dejar solo lo que sigue
                If InStr(batch, "0") > 0 Then
                    batch = Mid(batch, InStr(batch, "0") + 1)
                End If
                
                ' Guardar en columna B del principal
                wsPrincipal.Cells(i, "B").Value = batch
                ' Registrar nombre del operador en columna C
                wsPrincipal.Cells(i, "C").Value = operador
            Else
                wsPrincipal.Cells(i, "B").Value = "No encontrado"
            End If
        End If
    Next i
    
    ' 8. Cerrar archivo origen
    wbOrigen.Close SaveChanges:=False
    
    MsgBox "Proceso terminado por " & operador, vbInformation
End Sub



Private Sub Worksheet_Change(ByVal Target As Range)
    Dim colIngreso As Variant, colDias As Variant
    Dim fila As Long
    Dim fechaIngreso As Date
    Dim encabezadoIngreso As String
    Dim encabezadoDias As String
    Dim ws As Worksheet
    
    Set ws = Me
    
    encabezadoIngreso = "Fecha de ingreso"
    encabezadoDias = "Días transcurridos"
    
    ' Buscar las columnas (solo la primera vez funciona rápido)
    colIngreso = Application.Match(encabezadoIngreso, ws.Rows(1), 0)
    colDias = Application.Match(encabezadoDias, ws.Rows(1), 0)
    
    If IsError(colIngreso) Then Exit Sub ' columna de ingreso no existe
    colIngreso = CLng(colIngreso)
    
    ' Crear columna Días si no existe
    If IsError(colDias) Then
        colDias = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column + 1
        ws.Cells(1, colDias).Value = encabezadoDias
    Else
        colDias = CLng(colDias)
    End If
    
    ' Verificar si la celda modificada está en la columna de ingreso
    If Not Intersect(Target, ws.Columns(colIngreso)) Is Nothing Then
        For Each c In Intersect(Target, ws.Columns(colIngreso))
            If IsDate(Trim(c.Value)) Then
                fechaIngreso = CDate(Trim(c.Value))
                ws.Cells(c.Row, colDias).Value = Date - fechaIngreso
            Else
                ws.Cells(c.Row, colDias).Value = ""
            End If
        Next c
    End If
End Sub
